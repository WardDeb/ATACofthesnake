#!/usr/bin/env python3
import argparse
from rich import print
from rich.console import Console
import sys
import subprocess
from ATACofthesnake import misc
import yaml
import os
import snakemake

def parseArguments():
    parser = argparse.ArgumentParser(
        prog='ATACofthesnake',
        description='ATACseq analysis starting from bam files.',
        )

    # In and Output
    IO = parser.add_argument_group('Input/Output')
    IO.add_argument('--bamDir', type=str, required=True,
                help='Provide the directory containing your bam files.')
    IO.add_argument('--outDir', type=str, required=False, default='AOS',
                help='Specify output directory.')
    IO.add_argument('--blackList', type=str, required=True,
                help='Provide a blacklist file containing genomic regions to ignore (BED format)')
    IO.add_argument('--genes', type=str, required=True,
                help='Provide a GTF file containing genome annotations.')
    IO.add_argument('--genomeFasta', type=str, required=True,
                help='Provide genome fasta file.')
    IO.add_argument('--sampleSheet', type=str, required=False, default=0,
                help='Provide a sampleSheet, tsv seperated, with headers [Sample, Cond, Comp, Batch]. Comp is a string grouping 2 conditions (e.g. 1 DE analysis per Comp).')
    IO.add_argument('--motifs', type=str, required=False, default=0,
                help='Specify a motif file (meme format) to search for in diff. peaks.')
    IO.add_argument('--peakSet', type=str, required=False, default=0,
                help='Provide an external peak set (BED file) instead calling peaks yourself. Overrides mergeBam. Provide as peak.bed:comparison,peak2.bed:comparison2 (comma seperated).')
    
    # Analysis Parameters
    Params = parser.add_argument_group('Parameters')
    Params.add_argument('--downStream', action='store_true', required=False,
                help='Specify if you want downstream analysis (e.g. diffpeak heatmap, motif enrichment, ...).')
    Params.add_argument('--fragSizeMax', type=int, default=150,
                help='Specify fragment size cut-off (default = 150).')
    Params.add_argument('--genomeSize', type=float, required=True,
                help='Provide genome size. e.g. 1.87e9 for mouse.')
    Params.add_argument('--mergeBam', action='store_true', required=False,
                help="Set flag if you want to merge bam files per replicate per condition before peak calling (will merge all bamFiles if you don't specify sampleSheet. Requires a sampleSheet.")

    # snakeOpts
    snakeOpts = parser.add_argument_group('SnakeMake Options')
    snakeOpts.add_argument('--clusterCMD', type=str, required=False,
                help='Cluster submission command, defaults to SlurmEasy')
    snakeOpts.add_argument('--condaPrefix', required=True,
                help='Specify your conda installation location. e.g. /localenv/user/anaconda/miniconda3')
    snakeOpts.add_argument('--DAG', action='store_true',
                help='Build a DAG if dryrun is invoked. Requires you to have dot (graphviz) installed.')
    snakeOpts.add_argument('--dryRun', action='store_true', required=False,
                help='Run workflow as dryrun, a DAG.pdf is also created in the directory of execution.')

    args = parser.parse_args()
    return args

def main():
    console = Console()

    # Fetch arguments.
    args = parseArguments()

    # Read bamFiles
    bamFiles = misc.readBamDir(args.bamDir)
    console.print("Samples: {}".format(bamFiles))

    # Run a sanity check for all required input files.
    misc.checkExist(
        [args.blackList,
         args.genes,
         args.genomeFasta,
         args.motifs
        ]
    )
    # Start populating the paramDic.
    paramDic = {}
    paramDic['Samples'] = bamFiles
    paramDic['sampleSheet'] = args.sampleSheet
    paramDic['Invocation'] = " ".join(sys.argv)
    paramDic['baseDir'] = misc.returnScriptPath()
    paramDic['bamDir'] = os.path.abspath(args.bamDir.strip('/'))
    paramDic['outDir'] = os.path.abspath(args.outDir.strip('/'))
    paramDic['mergeBam'] = args.mergeBam
    if args.peakSet and arg.mergeBam:
        args.mergeBam = 0
        print("peakSet provided and mergeBam flag set: mergeBam will be ignored.")
    paramDic['peakSet'] = args.peakSet
    paramDic['blackList'] = os.path.abspath(args.blackList)
    paramDic['GTF'] = os.path.abspath(args.genes)
    paramDic['genomeSize'] = args.genomeSize
    paramDic['genomeFa'] = os.path.abspath(args.genomeFasta)
    paramDic['fragSize'] = args.fragSizeMax
    paramDic['motifLoc'] = os.path.abspath(args.motifs)

    # Dump the paramDic into a yaml file.
    if not os.path.exists(paramDic['outDir']):
        os.mkdir(paramDic['outDir'])
    with open(
        os.path.join(
            paramDic['outDir'],
            'Parameters.yaml'
        ), 'w') as f:
        # Don't have ref pointers in ultimate dic.
        yaml.Dumper.ignore_aliases = lambda *args : True
        # Write out yaml
        yaml.dump(paramDic, f, sort_keys=False)
    print("Parameters written out into {}".format(os.path.join(paramDic['outDir'], 'Parameters.yaml')))

    # Parse GTF file (grab TSS and sort for Uropa).
    if not os.path.exists(
        os.path.join(paramDic['outDir'],
        "genes.sort.gtf")
    ):
        print("Sorting GTF for Uropa later on.")
        misc.sortGTF(args.genes, paramDic['outDir'])
    else:
        print("Found a sorted GTF file. Moving on..")
    if not os.path.isfile(
        os.path.join(paramDic['outDir'],
        "TSS.bed")
    ):
        print("Did not find TSS file, launching extraction.")
        misc.GTFtoTSS(paramDic['outDir'] + "/genes.sort.gtf", paramDic['outDir'])
    else:
        print("Found TSS.bed. Moving on..")
    print("So far so good, launching snakemake instances :smiley:")

    # Launch snakemake

    if args.clusterCMD:
        clusterCMD = args.clusterCMD
    else:
        clusterCMD = "SlurmEasy -t {threads} -l " + paramDic['outDir'] + "/cluster_logs -n {rule}"
    with console.status("[bold green] Running snakemake..."):
        prePeak = snakemake.snakemake(
            os.path.join(paramDic["baseDir"],'bamProcess.smk'),
            cores=10,
            nodes=5,
            latency_wait=300,
            max_jobs_per_second=1,
            cluster=clusterCMD,
            max_status_checks_per_second=1,
            use_conda=True,
            conda_prefix=args.condaPrefix,
            scheduler='greedy',
            printshellcmds=True,
            conda_frontend='conda',
            config=paramDic,
            dryrun=args.dryRun
        )
        if prePeak:
            print("[green]bamProcess run succesful.[/green]")
            if paramDic['sampleSheet'] and not args.dryRun:
                #Only invoke downStream motifs etc. if we have enough significant sites.
                ss = misc.readss(paramDic['sampleSheet'], paramDic['Samples'])
                paramDic['diffComp'] = misc.checkNumDiff(ss, paramDic['outDir'])
                if paramDic['diffComp']:
                    print("Differential regions found in at least 1 comparison. Invoking downstream processing.")
                    postPeak = snakemake.snakemake(
                        os.path.join(paramDic["baseDir"],'diffDown.smk'),
                        cores=10,
                        nodes=5,
                        latency_wait=300,
                        max_jobs_per_second=1,
                        cluster=clusterCMD,
                        max_status_checks_per_second=1,
                        use_conda=True,
                        conda_prefix=args.condaPrefix,
                        scheduler='greedy',
                        printshellcmds=True,
                        conda_frontend='conda',
                        config=paramDic
                    )
                    if postPeak:
                        print("[green]postPeak run succesful.[/green]")
                    else:
                        print("[red]bamProcess failed, check the logs.[/red]")
                else:
                    print("not enough differential regions found for motif analysis.")
        else:
            print("[red]bamProcess failed. Check logs.[/red]")
            sys.exit()

if __name__ == "__main__":
    main()
